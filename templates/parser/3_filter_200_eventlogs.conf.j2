    # --- Eventlogs --- #
    if [type] == "eventlog" {
        date {
            match => [  "EventTime" , "YYYY-MM-dd HH:mm:ss" ]
            timezone => "America/New_York"
        }

        mutate {
            rename => [ "AccountName", "user" ]
            rename => [ "AccountType", "[eventlog][account_type]" ]
            rename => [ "ActionName", "[eventlog][action_name]" ]
            rename => [ "ActivityId", "[eventlog][activity_id]" ]
            rename => [ "ActivityID", "[eventlog][activity_id]" ]
            rename => [ "Address", "ip6" ]
            rename => [ "ApplicationPath", "[eventlog][application_path]" ]
            rename => [ "AuthenticationPackageName", "[eventlog][authentication_package_name]" ]
            rename => [ "Category", "[eventlog][category]" ]
            rename => [ "Channel", "[eventlog][channel]" ]
            rename => [ "DiagnosticModuleImageName", "[eventlog][diagnostic_module_image_name]" ]
            rename => [ "Domain", "domain" ]
            rename => [ "EventID", "[eventlog][event_id]" ]
            rename => [ "EventType", "[eventlog][event_type]" ]
            rename => [ "File", "[eventlog][file_path]" ]
            rename => [ "Guid", "[eventlog][guid]" ]
            rename => [ "Hostname", "hostname" ]
            rename => [ "Interface", "[eventlog][interface]" ]
            rename => [ "InterfaceGuid", "[eventlog][interface_guid]" ]
            rename => [ "InterfaceName", "[eventlog][interface_name]" ]
            rename => [ "IpAddress", "ip" ]
            rename => [ "IpPort", "port" ]
            rename => [ "Key", "[eventlog][key]" ]
            rename => [ "LogonGuid", "[eventlog][logon_guid]" ]
            rename => [ "Message", "message" ]
            rename => [ "ModifyingUser", "[eventlog][modifying_user]" ]
            rename => [ "NewProfile", "[eventlog][new_profile]" ]
            rename => [ "OldProfile", "[eventlog][old_profile]" ]
            rename => [ "Port", "port" ]
            rename => [ "PrivilegeList", "[eventlog][privilege_list]" ]
            rename => [ "ProcessID", "pid" ]
            rename => [ "ProcessName", "[eventlog][process_name]" ]
            rename => [ "ProviderGuid", "[eventlog][provider_guid]" ]
            rename => [ "ReasonCode", "[eventlog][reason_code]" ]
            rename => [ "RecordNumber", "[eventlog][record_number]" ]
            rename => [ "ScenarioId", "[eventlog][scenario_id]" ]
            rename => [ "Severity", "level" ]
            rename => [ "SeverityValue", "[eventlog][severity_code]" ]
            rename => [ "SourceModuleName", "nxlog_input" ]
            rename => [ "SourceName", "[eventlog][program]" ]
            rename => [ "SubjectDomainName", "[eventlog][subject_domain_name]" ]
            rename => [ "SubjectLogonId", "[eventlog][subject_logonid]" ]
            rename => [ "SubjectUserName", "[eventlog][subject_user_name]" ]
            rename => [ "SubjectUserSid", "[eventlog][subject_user_sid]" ]
            rename => [ "System", "[eventlog][system]" ]
            rename => [ "TargetDomainName", "[eventlog][target_domain_name]" ]
            rename => [ "TargetLogonId", "[eventlog][target_logonid]" ]
            rename => [ "TargetUserName", "[eventlog][target_user_name]" ]
            rename => [ "TargetUserSid", "[eventlog][target_user_sid]" ]
            rename => [ "TaskName", "[eventlog][task_name]" ]
            rename => [ "TaskInstanceId", "[task_instance_id]" ]
            rename => [ "ThreadID", "thread" ]
            rename => [ "param1" , "[eventlog][program]" ]
            rename => [ "param2" , "[eventlog][state]" ]

            lowercase => [ "[eventlog][event_type]" ]
        }

        mutate {
            remove_field => [
                        "CurrentOrNextState",
                        "DiagnosticModuleId",
                        "Description",
                        "EventReceivedTime",
                        "EventTime",
                        "EventTimeWritten",
                        "InstanceId",
                        "IPVersion",
                        "KeyLength",
                        "Keywords",
                        "LmPackageName",
                        "LogonProcessName",
                        "LogonType",
                        "Name",
                        "Opcode",
                        "OpcodeValue",
                        "OriginalActivityId",
                        "PolicyProcessingMode",
                        "Protocol",
                        "ProtocolType",
                        "SourceModuleType",
                        "State",
                        "Task",
                        "TransmittedServices",
                        "Type",
                        "UserID",
                        "Version"
            ]
        }

        # Extract source IP and source port from [host] field
        grok { match => [ "host" , "%{IP:source_ip}:%{INT:source_port}" ] }

        if [hostname] =~ /^[a-zA-Z].*\./ {
            mutate { rename => [ "hostname" , "fqdn" ] }
            grok   {
                match  => [ "fqdn" , "%{DATA:host}\.%{HOST:domain}$" ]
                overwrite => [ "host" ]
                overwrite => [ "domain" ]
            }
        }
    }
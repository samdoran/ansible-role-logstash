    # --- Nginx logs --- #
    if [syslog][program] =~ "nginx" {
        if [syslog][program] == "nginx-access" {
            grok {
                patterns_dir => [ "/opt/logstash/patterns" ]
                match => [ "message" , "(?m)%{NGINX_ROYALL}" ]
                add_tag => [ "grokked", "share_eng" ]
            }

            if [us] {
                grok {
                    match => [ "us" , "%{UPSTREAMS}" ]
                    add_tag => "upstream_grok"
                    tag_on_failure => [ "upstreams_grokparsefail" ]
                }
            }

            useragent { source => "agent" }

            geoip {
                source => "clientip"
            }
        }

        if [syslog][program] == "nginx-error" {
            grok {
                patterns_dir => [ "/opt/logstash/patterns" ]
                match => [ "message" , "(?m)%{NGINX_ERROR}" ]
                add_tag => [ "grokked" , "share_eng" ]
            }

            geoip {
                source => "clientip"
            }
        }

        if "_grokparsefailure" not in [tags] {

            # Extract folder
            if [request] =~ /\/.*\// {
                grok { match => [ "request", "^/%{DATA:[file][folder]}/" ] }
            }

            # Extract filename
            if [request] =~ /^((\/.*?)+)?\/(.*?)$/ {
                grok { match => [ "request" , "^((/%{DATA})+)?/%{DATA:[file][name]}($|\?)" ] }
            }

            # Extract extension
            if [file][name] and [file][name] =~ /\./ {
                grok {
                    patterns_dir => [ "/opt/logstash/patterns" ]
                    match => [ "[file][name]" , "\.%{EXTENSION:[file][extension]}" ]
                }

                mutate { lowercase => [ "[file][extension]" ] }
            }

            # Copy clientip to a new field, then perform a reverse lookup on it
            # This had to be removed beceause it slowed processing to a crawl
            # mutate {
            #     add_field => { "clientfqdn" => "%{clientip}"}
            # }
            # dns {
            #     reverse => [ "clientfqdn" ]
            #     action => "replace"
            # }
        }

        date {
            match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" , "yyyy/MM/dd HH:mm:ss" ]
            add_tag => "dated"
        }

        # Remove timestamp fields because it confuses ES
        mutate { remove_field => [ "timestamp" ] }
    }
